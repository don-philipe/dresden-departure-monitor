#!/bin/bash
#
### LICENSE ###
# ddm - dresden-departure-monitor:
# getting departures for stops in Dresden
#
# Copyright (C) 2011 don_philipe - don_philipe@gmx.de
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
###
#


OPTIONS="-q --keep-session-cookies --save-cookies cookies --load-cookies cookies -T 100"
URL="www.dvb.de"
VERSION="Version: 1.1"

# default:
displayed=15		# number of displayed departures
loop=false
loop_sec=30		# repeat getting departuretimes every x seconds
city="Dresden"
stop=""
headlinelength=50		# length of the headline without stop

# possible vehicles:
# strassenbahn,stadtbus,regionalbus,zug,sbahn,seilschwebebahn,faehre,astrufbus
# default:
# 	strassenbahn, stadtbus


helptext()
{
  cat <<HELP

Syntax: ddm [options] [stop]
Shows the departuretimes, routes, vehicles and directions for a given stop in Dresden.

Options:	
	-d num		changes the number of displayed departures (default: 15)
	-h, --help	shows this helptext
	-l [sec]	get departuretimes repeatedly every 30 second or add an 
			own interval in seconds (greater than 0)
	-v, --version	returns the scriptversion
HELP
}


	
getSessionId()
{
	grep /de/Fahrplan/Abfahrtsmonitor/haltestellenauswahl.do?uk_id abfahrt > sessionid
	sessionid="$(sed 's/  <form action="\/de\/Fahrplan\/Abfahrtsmonitor\/haltestellenauswahl.do?uk_id=//;s/#result" id="am_form" method="post" >//' sessionid)"
}


clearDir()
{
	rm abfahrt
	rm cookies
	rm sessionid
	#unset timearray
	#unset routearray
	#unset directionarray
	#unset vehiclelarray
}


getDepartures()
{
  	wget $OPTIONS -O abfahrt --post-data "amform%5Bdatum%5D=${cur_date}&amform%5Bzeit%5D=${cur_time}&amform%5Bstartort%5D=${city}&amform%5Bstartname%5D=${stop}&amform%5Bstarttype%5D=stop" "${URL}/de/Fahrplan/Abfahrtsmonitor/haltestellenauswahl.do?uk_id=${sessionid}" #%20
	# test if stop is valid:
	if [ -n "$(grep Unbekannte\ Haltestelle\. abfahrt)" ]
	then
		echo -e "\nUnknown stop!\n"
		clearDir
		exit 0
	fi

	getSessionId

	# getting departuretimes again with only two vehicles
	wget $OPTIONS -O abfahrt --post-data 'amform%5Bverkehrsmittelcheckboxen%5D=strassenbahn&amform%5Bverkehrsmittelcheckboxen%5D=stadtbus' "${URL}/de/Fahrplan/Abfahrtsmonitor/abfahrten.do?uk_id=${sessionid}"
}


clearTime() 
{
	TMP="${1}"
	if (test $(echo ${TMP} | cut -c 1) == "0")
	then
		TMP=$(echo ${TMP} | cut -c 2)
	fi
	echo ${TMP}
}


calcRemainingTime()	# doesnt work correct around 0 o'clock
{
	dep_time_h=$(clearTime ${timearray[$i]%%:*})
	cur_time_h=$(clearTime ${cur_time%%:*})
	dep_time_m=$(clearTime ${timearray[$i]##*:})
	cur_time_m=$(clearTime ${cur_time##*:})

	if [ $dep_time_h -lt $cur_time_h ]
	then
		timeshift=24
	else
		timeshift=0
	fi

	if [ $(( $dep_time_h - $cur_time_h )) -eq 0 ]	# same hour
	then
		remaining_time[$i]="$(( $dep_time_m - $cur_time_m ))"
	else							# 1,2,... hour later
		if [ $(( $dep_time_m - $cur_time_m )) -lt 0 ]
		then	#remaining_time not greater than 59 min
			minutes="$(( 60 + $(( $dep_time_m - $cur_time_m )) ))"
			if [ $(( $dep_time_h - $cur_time_h )) -lt 0 ]
			then	# for daychange
				hours="$(( 23 + $(( $dep_time_h - $cur_time_h )) ))"
				remaining_time[$i]="$hours:$minutes"
			else
				remaining_time[$i]=$minutes
			fi
		else	# remaining_time greater than 59 min
			remaining_time[$i]="$(( $timeshift + $dep_time_h - $cur_time_h )):$(( $dep_time_m - $cur_time_m ))"
		fi
	fi
}


processHtml()
{
	startline="$(grep -n \"abfahrten_container\" abfahrt)"
	startline="${startline%%:*}"
	endline="$(grep -n /de/Fahrplan/Abfahrtsmonitor/spaeter.do abfahrt)"
	endline="${endline%%:*}"

	time="$(sed -n ''${startline}','${endline}'p' abfahrt | sed '/[012][0-9]\:[0-5][0-9]/!d;s/[^0-9\:]//g')"	# time; left-aligned
	vehicle="$(sed -n ''${startline}','${endline}'p' abfahrt | sed '/^.*pikto_[a-z]-\?[a-z]*\.gif.*$/!d;s/^.*pikto_//g;s/\.gif.*$/ /g;s/\b./\U&/g')"
	route="$(sed -n ''${startline}','${endline}'p' abfahrt | sed '/<td>[1-9][0-9]\?[0-9]\?<\/td>/!d;s/[^0-9]//g;')" #s/[1-9][^0-9]/&\ /g')"
	direction="$(sed -n ''${startline}','${endline}'p' abfahrt | sed '/          \t.*[A-ZÄÖÜ][a-zäöüß]*.*[A-ZÄÖÜ]\?[a-zäöüß]*\t/!d;s/          \t//g;s/\ /+/g;s/\t/ /g')"

	#echo $time
	#echo $vehicle
	#echo $route
	#echo $direction

	for (( i=1 ; i <= $displayed ; i++ ))	# loop starts with 1 for the calculation two lines below
	do
		timearray[$i]="$(echo ${time:$((($i-1)*6)):6})"	# ${String:Position:Laenge}
		
		if [ "$time" == "" ]
		then
			break
		fi
		vehiclearray[$i]="$(echo `expr "$vehicle" : '\([A-ZÄÖÜ]-\?B\?[a-zäöüß]*\ \)'`)"	# -\?B\? for S-Bahn
		vehicle="$(echo $vehicle | sed 's/[A-ZÄÖÜ]-\?B\?[a-zäöüß]*\ //')"
		routearray[$i]="$(echo `expr "$route" : '\([1-9][0-9][0-9]\|[1-9][0-9]\|[1-9]\)'`)" 	#\|S\ [1-9] - add for S-Bahn at the end
		route="$(echo $route | sed 's/[1-9][0-9][0-9]\ \|[1-9][0-9]\ \|[1-9]\ //')" 	#\|S\ [1-9]\ - add for S-Bahn at the end
		directionarray[$i]="$(echo `expr "$direction" : '\([A-ZÄÖÜ][A-ZÄÖÜa-zäöüß+\.,]*\)'`)"
		directionarray[$i]=$(echo ${directionarray[$i]} | sed 's/+/\ /g')
		direction="$(echo $direction | sed 's/[A-ZÄÖÜ][A-ZÄÖÜa-zäöüß+\.,]*\ //')"
		calcRemainingTime
	done

	#echo ${timearray[@]}
	#echo ${vehiclearray[@]}
	#echo ${routearray[@]}
	#echo ${directionarray[@]}
	#echo ${remaining_time[@]}
}


output()
{
	echo -e "\nDeparturemonitor for ${stop}, ${city}, ${cur_date}, ${cur_time}:\n${underline}\n"
	echo -e "Time\tRoute\tVehicle\t\tDirection\t\tRemaining time"	# tableheader
	# output lines:
	for (( i=1 ; i <= $displayed ; i++ ))
	do
		if [ "${timearray[$i]}" == "" ]	# break loop if not enough departures
		then
			break
		fi
		
		tabs="\t\t"
		if [ ${#directionarray[$i]} -lt 8 ]
		then
			tabs="\t\t\t"
		fi
		if [ ${#directionarray[$i]} -gt 15 ]
		then
			tabs="\t"
		fi
		#echo ${#directionarray[$i]}
		#echo $tabs
		echo -e "${timearray[$i]}\t${routearray[$i]}\t${vehiclearray[$i]}\t\t${directionarray[$i]}$tabs${remaining_time[$i]}"
	done
	echo -e "\n"
}



######################
# Script starts here #
######################

while [ "${1}" != ''  ]
do
	[ "${1}" == "-d" ] && shift && displayed="${1}" && shift
	[ "${1}" == "-h" ] || [ "${1}" == "--help" ] && helptext && exit 0
	[ "${1}" == "-l" ] && shift && loop=true && loop_sec="${1}" && shift
	[ "${1}" == "-v" ] || [ "${1}" == "--version" ] && echo $VERSION && exit 0
	[ -n "${1}" ] && stop="${1} ${2}" && shift && shift	# 2x shift for stops containing two words

if [ $(( $displayed + 0 )) -eq 0 ] ; then
	echo "Syntax error! Optionparameter not found or 0."
	exit 0
fi
if [ "$(echo $loop_sec | sed '/[0-9]/!d')" == "" ] ; then
	stop="${loop_sec} ${stop}"
	loop_sec=30
fi

done
#echo $loop_sec
# ping -c 1 $URL && 

# format input:
stop="$(echo $stop | sed 's/\b./\U&/g;s/\ ,$/,/')"	# set capital letters and remove whitespace in front of comma
let headlinelength=$headlinelength+${#stop}	# adds the length of the stopname to the headlinelength
for (( i=1 ; i<= $headlinelength ; i++ ))
do
	underline="${underline}="
done


# get website for initial sessionid:
wget $OPTIONS -O abfahrt "${URL}/de/Fahrplan/Abfahrtsmonitor"

# set date and time:
cur_date="$(date +%d.%m.%Y)"
cur_time="$(date +%H:%M)"
	
if [ "$(cat abfahrt)" == "" ]
then
	echo -e "\nCan't reach the server!\n"
	clearDir
	exit 0
fi

getSessionId
getDepartures
processHtml
output
clearDir
	

while $loop
do
	sleep $loop_sec
	
	# get website for initial sessionid:
	wget $OPTIONS -O abfahrt "${URL}/de/Fahrplan/Abfahrtsmonitor"

	# set date and time:
	cur_date="$(date +%d.%m.%Y)"
	cur_time="$(date +%H:%M)"
	
	if [ "$(cat abfahrt)" == "" ]
	then
		echo -e "\nCan't reach the server!\n"
		clearDir
		exit 0
	fi

	getSessionId
	getDepartures
	processHtml
	clear
	output
	clearDir	
done

exit 0