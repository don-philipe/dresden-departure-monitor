#!/bin/bash
#
# --- Infos ---------------------------------------------------------------------------------------
#
#	Scriptname		abfahrtsmonitor
#	Funktion		Abfahrtsmonitor mit aktuellen Abfahrtszeiten fuer beliebige Haltestellen in Dresden
#
#	benoetigt		bash, wget, (Internetzugang)
#
#	Autor			Philipp Thöricht
#
#	Start			02.2010
#	Stand			09.2011 
#
#	Version 		0.9
#
# Was noch fehlt:
#	Minuten bis zur Abfahrt (als Option)
#	Option zur wiederholten Abfrage
#	ordentlicher timeout mit ausgabe
#	gibt es Haltestellen mit mehr als 3 Worten? -> s. Uebergabe der Parameter
#	Angabe eines anderen Ortes inklusive Pruefung, ob er gueltig ist
#	Unterscheidung ob keine Verbindung zum Internet oder keine zur DVB Seite - in dem Fall Ausweichen auf VVO (keine Ahnung ob die zusammenhaengen)
#
# Probleme:
# ========
# Gibt die Seite der DVB nur die Zeiten der Fahrplaene wieder, oder die tatsaechlichen Zeiten?
# 	eventuell Umstieg auf Bezugsstelle der Widgets
# 	vermutlich sind die Widgets auch nicht aktueller als die Seite der DVB
# 	die vvo-online Seite gibt jedenfalls (makroskopisch) nichts anderes an also die dvb Seite
#	Fehlermeldung bei Aufraeumen falls Datei nicht existiert
#	Bus 400 nach Annaberg-Buchholz, Busbahnhof vom Hauptbahnhof ist als Stadtbus gekennzeichnet und bereitet Probleme
#
# -------------------------------------------------------------------------------------------------


OPTIONS="-q --keep-session-cookies --save-cookies cookies --load-cookies cookies -T 100"
URL="www.dvb.de"
VERSION="Version: 0.9"

# default:
anzahlangezeigt="15"		# Anzahl der angezeigten Abfahrten
city="Dresden"
stop="Zellescher Weg"
headlinelength=50		# length of the headline without stop

# moegliche Verkehrsmittel:
# strassenbahn,stadtbus,regionalbus,zug,sbahn,seilschwebebahn,faehre,astrufbus
# defaultmaessig angezeigte Verkehrsmittel:
# 	strassenbahn, stadtbus


helptext()
{
  cat <<HELP

Syntax: abfahrtsmonitor [Optionen] [Haltestelle]
Abfahrtszeiten einer Haltestelle fuer die Dresdener Verkehrsbetriebe anzeigen

Optionen:	
	-a 	legt die Anzahl an angezeigten Haltestellen fest (Standart: 15)
	-h	zeigt diese Hilfe an
	-v	gibt die Version aus
HELP
}


setDateAndTime()
{
	datum="$(date +%d.%m.%Y)"
	uhrzeit="$(date +%H:%M)"
}


formatInput()
{
	stop="$(echo $stop | sed 's/\b./\U&/g;s/\ ,$/,/')"	# Anfangsbuchstaben gross machen und Leerzeichen vor Komma entfernen
	let headlinelength=$headlinelength+${#stop}	# liest die Laenge des Strings in haltestelle aus und addiert auf die Grundlaenge
}


getFirstSessionID()
{
	wget $OPTIONS -O index "${URL}/de/Fahrplan/Abfahrtsmonitor"
  
	if [ "$(cat index)" == "" ]	# wenn index leer ist, konnte nach 10 sek noch keine Verbindung aufgebaut werden
	then			# damit gilt die als nicht vorhanden oder zu langsam
		echo -e "\nKeine oder zu langsame Interverbindung, oder der DVB-Server ist momentan nicht erreichbar!\n"
		clearDir
		exit 0
	fi

	grep /de/Fahrplan/Abfahrtsmonitor/haltestellenauswahl.do?uk_id index > sessionid
	sessionid="$(sed 's/  <form action="\/de\/Fahrplan\/Abfahrtsmonitor\/haltestellenauswahl.do?uk_id=//;s/#result" id="am_form" method="post" >//' sessionid)"
}


getFollowingSessionID()
{
	grep /de/Fahrplan/Abfahrtsmonitor/abfahrten.do?uk_id abfahrt > nextsessionid
	nextsessionid="$(sed 's/<form action="\/de\/Fahrplan\/Abfahrtsmonitor\/abfahrten.do?uk_id=//;s/#result" id="filter_form" method="post" >//' nextsessionid)"
}


getDepartures()
{
  	wget $OPTIONS -O abfahrt --post-data "amform%5Bdatum%5D=${datum}&amform%5Bzeit%5D=${uhrzeit}&amform%5Bstartort%5D=${city}&amform%5Bstartname%5D=${stop}&amform%5Bstarttype%5D=stop" "${URL}/de/Fahrplan/Abfahrtsmonitor/haltestellenauswahl.do?uk_id=${sessionid}" #%20
	#cat abfahrt
	# Test auf gueltige Haltestelle:
	if [ -n "$(grep Unbekannte\ Haltestelle\. abfahrt)" ]
	then
		echo -e "\nUnbekannte Haltestelle\n"
		clearDir
		exit 0
	fi

	getFollowingSessionID

	# nochmalige Abfrage, diesmal mit eingeschraenkten Verkehrsmitteln
	wget $OPTIONS -O abfahrt --post-data 'amform%5Bverkehrsmittelcheckboxen%5D=strassenbahn&amform%5Bverkehrsmittelcheckboxen%5D=stadtbus' "${URL}/de/Fahrplan/Abfahrtsmonitor/abfahrten.do?uk_id=${nextsessionid}"
}


calcRemainingTime()	# doesnt work correct around 0 o'clock
{
	if [ $(( ${timearray[$i]%%:*} - ${uhrzeit%%:*} )) -eq 0 ]	# same hour
	then
		remainingTime[$i]="$(( ${timearray[$i]##*:} - ${uhrzeit##*:} ))"
	else							# 1,2,... hour later
		if [ $(( ${timearray[$i]##*:} - ${uhrzeit##*:} )) -lt 0 ]
		then
			minutes="$(( 60 + $(( ${timearray[$i]##*:} - ${uhrzeit##*:} )) ))"
			if [ $(( ${timearray[$i]%%:*} - ${uhrzeit%%:*} )) -lt 0 ]
			then
				hours="$(( 24 + $(( ${timearray[$i]%%:*} - ${uhrzeit%%:*} )) ))"
				remainingTime[$i]="$hours:$minutes"
			else
				remainingTime[$i]="$(( ${timearray[$i]%%:*} - ${uhrzeit%%:*} )):$minutes"
			fi
		else
			remainingTime[$i]="$(( ${timearray[$i]%%:*} - ${uhrzeit%%:*} )):$(( ${timearray[$i]##*:} - ${uhrzeit##*:} ))"
		fi
	fi
}


processHtml()
{
	startline="$(grep -n \"abfahrten_container\" abfahrt)"
	startline="${startline%%:*}"
	endline="$(grep -n /de/Fahrplan/Abfahrtsmonitor/spaeter.do abfahrt)"
	endline="${endline%%:*}"

	cat abfahrt > copy1	# fuer die Zeiten
	cat abfahrt > copy2	# fuer die Verkehrsmittel
	cat abfahrt > copy3	# fuer die Linien
	cat abfahrt > copy4	# fuer die Richtungen

	# Zeiten, Verkehrsmittel, Linien und Richtungen herausschneiden:
	time="$(sed -n ''${startline}','${endline}'p' copy1 | sed '/[012][0-9]\:[0-5][0-9]/!d;s/[^0-9\:]//g')"	# Uhrzeit; linksbuendig
	vehicle="$(sed -n ''${startline}','${endline}'p' copy2 | sed '/^.*pikto_[a-z]-\?[a-z]*\.gif.*$/!d;s/^.*pikto_//g;s/\.gif.*$/ /g;s/\b./\U&/g')"	# ; Pattern ^.*pikto_ wegschneiden ; Klein- in Grossbuchstaben umwandeln
	route="$(sed -n ''${startline}','${endline}'p' copy3 | sed '/<td>[1-9][0-9]\?[0-9]\?<\/td>/!d;s/[^0-9]//g;')" #s/[1-9][^0-9]/&\ /g')"	# Linie - bei einstelliger Linie auf 3 Zeichen auffuellen
	direction="$(sed -n ''${startline}','${endline}'p' copy4 | sed '/          \t.*[A-ZÄÖÜ][a-zäöüß]*.*[A-ZÄÖÜ]\?[a-zäöüß]*\t/!d;s/          \t//g;s/\ /+/g;s/\t/ /g')"	# Richtung

	#echo $time
	#echo $vehicle
	#echo $route
	#echo $direction

	# Kopf der Tabelle:
	# die 4 obigen Variablen werden in entsprechende Arrays gepackt um sie dann Zeilenweise wieder auszugeben:
	for (( i=1 ; i <= $anzahlangezeigt ; i++ ))	# Schleife beginnt bei 1, da sonst Rechnung $i-1 bei zeitarray nicht aufgeht
	do
		timearray[$i]="$(echo ${time:$((($i-1)*6)):6})"	# ${String:Position:Laenge}
		# sind nicht genug Zeiten vorhanden (nachts wenn nichts mehr faehrt), dann Abbruch:
		if [ "$time" == "" ]
		then
			break
		fi
		vehiclearray[$i]="$(echo `expr "$vehicle" : '\([A-ZÄÖÜ]-\?B\?[a-zäöüß]*\ \)'`)"	# -\?B\? fuer die S-Bahn
		vehicle="$(echo $vehicle | sed 's/[A-ZÄÖÜ]-\?B\?[a-zäöüß]*\ //')"
		routearray[$i]="$(echo `expr "$route" : '\([1-9][0-9][0-9]\|[1-9][0-9]\|[1-9]\)'`)" 	#\|S\ [1-9] fuer S-Bahn hinten anfuegen
		route="$(echo $route | sed 's/[1-9][0-9][0-9]\ \|[1-9][0-9]\ \|[1-9]\ //')" 	#\|S\ [1-9]\ fuer S-Bahn hinten anfuegen
		directionarray[$i]="$(echo `expr "$direction" : '\([A-ZÄÖÜ][A-ZÄÖÜa-zäöüß+\.,]*\)'`)"
		# Plusse in Leerzeichen zurueckkonvertieren:
		directionarray[$i]=$(echo ${directionarray[$i]} | sed 's/+/\ /g')
		direction="$(echo $direction | sed 's/[A-ZÄÖÜ][A-ZÄÖÜa-zäöüß+\.,]*\ //')"
		calcRemainingTime
	done

	#echo ${timearray[@]}
	#echo ${vehiclearray[@]}
	#echo ${routearray[@]}
	#echo ${directionarray[@]}
	#echo ${remainingTime[@]}

}


output()
{
	#clear

	for (( i=1 ; i<= $headlinelength ; i++ ))
	do
		underline="${underline}="
	done

	echo -e "\nAbfahrtsmonitor fuer ${stop}, ${city}, ${datum}, ${uhrzeit}:\n${underline}\n"
	echo -e "Zeit\tLinie\tVerkehrsmittel\tRichtung\tAbfahrt in"	# Tabellenkopf
	# Zeilen zusammensetzen:
	for (( i=1 ; i <= $anzahlangezeigt ; i++ ))
	do
		if [ "${timearray[$i]}" == "" ]	# Abbruch wenn nicht genug Zeiten vorhanden (zB Nachts)
		then
			break
		fi
		echo -e "${timearray[$i]}\t${routearray[$i]}\t${vehiclearray[$i]}\t\t${directionarray[$i]}\t${remainingTime[$i]}"
	done
	echo -e "\n"
}

clearDir()
{
	rm index
	rm cookies
	rm sessionid
	rm nextsessionid 2> /dev/null	# Fehler taucht auf, wenn Haltestelle unbekannt
	rm abfahrt
	rm copy1 2> /dev/null
	rm copy2 2> /dev/null
	rm copy3 2> /dev/null
	rm copy4 2> /dev/null
	unset timearray
	unset routearray
	unset directionarray
	unset vehiclelarray
}


#####################################################
# MAIN +++ MAIN +++ MAIN +++ MAIN +++ MAIN +++ MAIN #
#####################################################

while [ "${1}" != ''  ]
do
	[ "${1}" == "-a" ] && shift && anzahlangezeigt="${1}" && shift
	[ "${1}" == "-h" ] && helptext && exit 0
	[ "${1}" == "-v" ] && echo $VERSION && exit 0
	[ -n "${1}" ] && stop="${1} ${2}" && shift && shift	# 2x shift for stops containing two words
done

# ping -c 1 $URL && 
formatInput
setDateAndTime
getFirstSessionID
getDepartures
processHtml
output
clearDir

exit 0