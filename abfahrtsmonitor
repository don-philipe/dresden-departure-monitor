#!/bin/bash
#
# Was noch fehlt:
#	Minuten bis zur Abfahrt (als Option)
#	Option zur wiederholten Abfrage
#	ordentlicher timeout mit ausgabe
#	gibt es Haltestellen mit mehr als 3 Worten? -> s. Uebergabe der Parameter
#	Angabe eines anderen Ortes inklusive Pruefung, ob er gueltig ist
#	Unterscheidung ob keine Verbindung zum Internet oder keine zur DVB Seite - in dem Fall Ausweichen auf VVO (keine Ahnung ob die zusammenhaengen)
#
# Probleme:
# ========
# Gibt die Seite der DVB nur die Zeiten der Fahrplaene wieder, oder die tatsaechlichen Zeiten?
# 	eventuell Umstieg auf Bezugsstelle der Widgets
# 	vermutlich sind die Widgets auch nicht aktueller als die Seite der DVB
# 	die vvo-online Seite gibt jedenfalls (makroskopisch) nichts anderes an also die dvb Seite
#	Fehlermeldung bei Aufraeumen falls Datei nicht existiert
#	Bus 400 nach Annaberg-Buchholz, Busbahnhof vom Hauptbahnhof ist als Stadtbus gekennzeichnet und bereitet Probleme
#
# -------------------------------------------------------------------------------------------------


OPTIONS="-q --keep-session-cookies --save-cookies cookies --load-cookies cookies -T 100"
URL="www.dvb.de"
VERSION="Version: 0.9"

# default:
displayed="15"		# number of displayed departures
city="Dresden"
stop="Zellescher Weg"
headlinelength=50		# length of the headline without stop

# possible vehicles:
# strassenbahn,stadtbus,regionalbus,zug,sbahn,seilschwebebahn,faehre,astrufbus
# default:
# 	strassenbahn, stadtbus


helptext()
{
  cat <<HELP

Syntax: abfahrtsmonitor [options] [stop]
Shows the departuretimes, routes, vehicles and directions for a given stop in Dresden.

Optionen:	
	-d 	changes the number of displayed departures (default: 15)
	-h	shows this helptext
	-v	returns the scriptversion
HELP
}


	
getSessionID()
{
	grep /de/Fahrplan/Abfahrtsmonitor/haltestellenauswahl.do?uk_id abfahrt > sessionid
	sessionid="$(sed 's/  <form action="\/de\/Fahrplan\/Abfahrtsmonitor\/haltestellenauswahl.do?uk_id=//;s/#result" id="am_form" method="post" >//' sessionid)"
}


clearDir()
{
	rm abfahrt
	rm cookies
	rm sessionid
	#unset timearray
	#unset routearray
	#unset directionarray
	#unset vehiclelarray
}


getDepartures()
{
  	wget $OPTIONS -O abfahrt --post-data "amform%5Bdatum%5D=${cur_date}&amform%5Bzeit%5D=${cur_time}&amform%5Bstartort%5D=${city}&amform%5Bstartname%5D=${stop}&amform%5Bstarttype%5D=stop" "${URL}/de/Fahrplan/Abfahrtsmonitor/haltestellenauswahl.do?uk_id=${sessionid}" #%20
	# test if stop is valid:
	if [ -n "$(grep Unbekannte\ Haltestelle\. abfahrt)" ]
	then
		echo -e "\nUnbekannte Haltestelle\n"
		clearDir
		exit 0
	fi

	getSessionID

	# getting departuretimes again with only two vehicles
	wget $OPTIONS -O abfahrt --post-data 'amform%5Bverkehrsmittelcheckboxen%5D=strassenbahn&amform%5Bverkehrsmittelcheckboxen%5D=stadtbus' "${URL}/de/Fahrplan/Abfahrtsmonitor/abfahrten.do?uk_id=${sessionid}"
}


clearTime() 
{
	TMP="${1}"
	if (test $(echo ${TMP} | cut -c 1) == "0")
	then
		TMP=$(echo ${TMP} | cut -c 2)
	fi
	echo ${TMP}
}


calcRemainingTime()	# doesnt work correct around 0 o'clock and between hours
{
	dep_time_h=$(clearTime ${timearray[$i]%%:*})
	cur_time_h=$(clearTime ${cur_time%%:*})
	dep_time_m=$(clearTime ${timearray[$i]##*:})
	cur_time_m=$(clearTime ${cur_time##*:})

	if [ $(( $dep_time_h - $cur_time_h )) -eq 0 ]	# same hour
	then
		remaining_time[$i]="$(( $dep_time_m - $cur_time_m ))"
	else							# 1,2,... hour later
		if [ $(( $dep_time_m - $cur_time_m )) -lt 0 ]
		then	#remaining_time not greater than 59 min
			minutes="$(( 60 + $(( $dep_time_m - $cur_time_m )) ))"
			if [ $(( $dep_time_h - $cur_time_h )) -lt 0 ]
			then	# for daychange
				hours="$(( 24 + $(( $dep_time_h - $cur_time_h )) ))"
				remaining_time[$i]="$hours:$minutes"
			else
				remaining_time[$i]=$minutes
			fi
		else	# remaining_time greater than 59 min
			remaining_time[$i]="$(( $dep_time_h - $cur_time_h )):$(( $dep_time_m - $cur_time_m ))"
		fi
	fi
}


processHtml()
{
	startline="$(grep -n \"abfahrten_container\" abfahrt)"
	startline="${startline%%:*}"
	endline="$(grep -n /de/Fahrplan/Abfahrtsmonitor/spaeter.do abfahrt)"
	endline="${endline%%:*}"

	time="$(sed -n ''${startline}','${endline}'p' abfahrt | sed '/[012][0-9]\:[0-5][0-9]/!d;s/[^0-9\:]//g')"	# Uhrzeit; linksbuendig
	vehicle="$(sed -n ''${startline}','${endline}'p' abfahrt | sed '/^.*pikto_[a-z]-\?[a-z]*\.gif.*$/!d;s/^.*pikto_//g;s/\.gif.*$/ /g;s/\b./\U&/g')"	# ; Pattern ^.*pikto_ wegschneiden ; Klein- in Grossbuchstaben umwandeln
	route="$(sed -n ''${startline}','${endline}'p' abfahrt | sed '/<td>[1-9][0-9]\?[0-9]\?<\/td>/!d;s/[^0-9]//g;')" #s/[1-9][^0-9]/&\ /g')"	# Linie - bei einstelliger Linie auf 3 Zeichen auffuellen
	direction="$(sed -n ''${startline}','${endline}'p' abfahrt | sed '/          \t.*[A-ZÄÖÜ][a-zäöüß]*.*[A-ZÄÖÜ]\?[a-zäöüß]*\t/!d;s/          \t//g;s/\ /+/g;s/\t/ /g')"	# Richtung

	#echo $time
	#echo $vehicle
	#echo $route
	#echo $direction

	for (( i=1 ; i <= $displayed ; i++ ))	# loop starts with 1 for the calculation two lines below
	do
		timearray[$i]="$(echo ${time:$((($i-1)*6)):6})"	# ${String:Position:Laenge}
		
		if [ "$time" == "" ]
		then
			break
		fi
		vehiclearray[$i]="$(echo `expr "$vehicle" : '\([A-ZÄÖÜ]-\?B\?[a-zäöüß]*\ \)'`)"	# -\?B\? fuer die S-Bahn
		vehicle="$(echo $vehicle | sed 's/[A-ZÄÖÜ]-\?B\?[a-zäöüß]*\ //')"
		routearray[$i]="$(echo `expr "$route" : '\([1-9][0-9][0-9]\|[1-9][0-9]\|[1-9]\)'`)" 	#\|S\ [1-9] fuer S-Bahn hinten anfuegen
		route="$(echo $route | sed 's/[1-9][0-9][0-9]\ \|[1-9][0-9]\ \|[1-9]\ //')" 	#\|S\ [1-9]\ fuer S-Bahn hinten anfuegen
		directionarray[$i]="$(echo `expr "$direction" : '\([A-ZÄÖÜ][A-ZÄÖÜa-zäöüß+\.,]*\)'`)"
		directionarray[$i]=$(echo ${directionarray[$i]} | sed 's/+/\ /g')
		direction="$(echo $direction | sed 's/[A-ZÄÖÜ][A-ZÄÖÜa-zäöüß+\.,]*\ //')"
		calcRemainingTime
	done

	#echo ${timearray[@]}
	#echo ${vehiclearray[@]}
	#echo ${routearray[@]}
	#echo ${directionarray[@]}
	#echo ${remaining_time[@]}
}


output()
{
	#clear

	for (( i=1 ; i<= $headlinelength ; i++ ))
	do
		underline="${underline}="
	done

	echo -e "\nAbfahrtsmonitor fuer ${stop}, ${city}, ${cur_date}, ${cur_time}:\n${underline}\n"
	echo -e "Zeit\tLinie\tVerkehrsmittel\tRichtung\t\tAbfahrt in"	# tableheader
	# output lines:
	for (( i=1 ; i <= $displayed ; i++ ))
	do
		if [ "${timearray[$i]}" == "" ]	# break loop if not enough departures
		then
			break
		fi
		
		tabs="\t\t"
		if [ ${#directionarray[$i]} -lt 8 ]
		then
			tabs="\t\t\t"
		fi
		if [ ${#directionarray[$i]} -gt 15 ]
		then
			tabs="\t"
		fi
		#echo ${#directionarray[$i]}
		#echo $tabs
		echo -e "${timearray[$i]}\t${routearray[$i]}\t${vehiclearray[$i]}\t\t${directionarray[$i]}$tabs${remaining_time[$i]}"
	done
	echo -e "\n"
}



######################
# Script starts here #
######################

while [ "${1}" != ''  ]
do
	[ "${1}" == "-d" ] && shift && displayed="${1}" && shift
	[ "${1}" == "-h" ] && helptext && exit 0
	[ "${1}" == "-v" ] && echo $VERSION && exit 0
	[ -n "${1}" ] && stop="${1} ${2}" && shift && shift	# 2x shift for stops containing two words
done

# ping -c 1 $URL && 

# format input:
stop="$(echo $stop | sed 's/\b./\U&/g;s/\ ,$/,/')"	# set capital letters and remove whitespace in front of comma
let headlinelength=$headlinelength+${#stop}	# adds the length of the stopname to the headlinelength

# set date and time:
cur_date="$(date +%d.%m.%Y)"
cur_time="$(date +%H:%M)"

# get website for initial sessionid:
wget $OPTIONS -O abfahrt "${URL}/de/Fahrplan/Abfahrtsmonitor"
  
if [ "$(cat abfahrt)" == "" ]
then
	echo -e "\nKeine oder zu langsame Interverbindung, oder der DVB-Server ist momentan nicht erreichbar!\n"
	clearDir
	exit 0
fi

getSessionID
getDepartures
processHtml
output
clearDir

exit 0